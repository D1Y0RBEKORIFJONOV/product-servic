// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.5
// source: protos/protoduct/prtoduct.proto

package protductDB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProductServer_CreateProduct_FullMethodName                 = "/ProductServer/CreateProduct"
	ProductServer_GetProductById_FullMethodName                = "/ProductServer/GetProductById"
	ProductServer_GetAllProducts_FullMethodName                = "/ProductServer/GetAllProducts"
	ProductServer_UpdateProduc_FullMethodName                  = "/ProductServer/UpdateProduc"
	ProductServer_DeletedProduct_FullMethodName                = "/ProductServer/DeletedProduct"
	ProductServer_ShowRealTimeAddinAndDeleteing_FullMethodName = "/ProductServer/ShowRealTimeAddinAndDeleteing"
)

// ProductServerClient is the client API for ProductServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServerClient interface {
	CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*Product, error)
	GetProductById(ctx context.Context, in *ProductByIdReq, opts ...grpc.CallOption) (*Product, error)
	GetAllProducts(ctx context.Context, in *GetAllProductReq, opts ...grpc.CallOption) (*GetAllProductsRes, error)
	UpdateProduc(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*Product, error)
	DeletedProduct(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	ShowRealTimeAddinAndDeleteing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ProductServer_ShowRealTimeAddinAndDeleteingClient, error)
}

type productServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServerClient(cc grpc.ClientConnInterface) ProductServerClient {
	return &productServerClient{cc}
}

func (c *productServerClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductServer_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServerClient) GetProductById(ctx context.Context, in *ProductByIdReq, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductServer_GetProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServerClient) GetAllProducts(ctx context.Context, in *GetAllProductReq, opts ...grpc.CallOption) (*GetAllProductsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProductsRes)
	err := c.cc.Invoke(ctx, ProductServer_GetAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServerClient) UpdateProduc(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductServer_UpdateProduc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServerClient) DeletedProduct(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductServer_DeletedProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServerClient) ShowRealTimeAddinAndDeleteing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ProductServer_ShowRealTimeAddinAndDeleteingClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProductServer_ServiceDesc.Streams[0], ProductServer_ShowRealTimeAddinAndDeleteing_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &productServerShowRealTimeAddinAndDeleteingClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductServer_ShowRealTimeAddinAndDeleteingClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productServerShowRealTimeAddinAndDeleteingClient struct {
	grpc.ClientStream
}

func (x *productServerShowRealTimeAddinAndDeleteingClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServerServer is the server API for ProductServer service.
// All implementations must embed UnimplementedProductServerServer
// for forward compatibility
type ProductServerServer interface {
	CreateProduct(context.Context, *CreateProductReq) (*Product, error)
	GetProductById(context.Context, *ProductByIdReq) (*Product, error)
	GetAllProducts(context.Context, *GetAllProductReq) (*GetAllProductsRes, error)
	UpdateProduc(context.Context, *UpdateProductReq) (*Product, error)
	DeletedProduct(context.Context, *DeleteReq) (*Empty, error)
	ShowRealTimeAddinAndDeleteing(*Empty, ProductServer_ShowRealTimeAddinAndDeleteingServer) error
	mustEmbedUnimplementedProductServerServer()
}

// UnimplementedProductServerServer must be embedded to have forward compatible implementations.
type UnimplementedProductServerServer struct {
}

func (UnimplementedProductServerServer) CreateProduct(context.Context, *CreateProductReq) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServerServer) GetProductById(context.Context, *ProductByIdReq) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedProductServerServer) GetAllProducts(context.Context, *GetAllProductReq) (*GetAllProductsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductServerServer) UpdateProduc(context.Context, *UpdateProductReq) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduc not implemented")
}
func (UnimplementedProductServerServer) DeletedProduct(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedProduct not implemented")
}
func (UnimplementedProductServerServer) ShowRealTimeAddinAndDeleteing(*Empty, ProductServer_ShowRealTimeAddinAndDeleteingServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowRealTimeAddinAndDeleteing not implemented")
}
func (UnimplementedProductServerServer) mustEmbedUnimplementedProductServerServer() {}

// UnsafeProductServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServerServer will
// result in compilation errors.
type UnsafeProductServerServer interface {
	mustEmbedUnimplementedProductServerServer()
}

func RegisterProductServerServer(s grpc.ServiceRegistrar, srv ProductServerServer) {
	s.RegisterService(&ProductServer_ServiceDesc, srv)
}

func _ProductServer_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductServer_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).CreateProduct(ctx, req.(*CreateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServer_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductServer_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).GetProductById(ctx, req.(*ProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServer_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductServer_GetAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).GetAllProducts(ctx, req.(*GetAllProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServer_UpdateProduc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).UpdateProduc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductServer_UpdateProduc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).UpdateProduc(ctx, req.(*UpdateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServer_DeletedProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).DeletedProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductServer_DeletedProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).DeletedProduct(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServer_ShowRealTimeAddinAndDeleteing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServerServer).ShowRealTimeAddinAndDeleteing(m, &productServerShowRealTimeAddinAndDeleteingServer{ServerStream: stream})
}

type ProductServer_ShowRealTimeAddinAndDeleteingServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productServerShowRealTimeAddinAndDeleteingServer struct {
	grpc.ServerStream
}

func (x *productServerShowRealTimeAddinAndDeleteingServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

// ProductServer_ServiceDesc is the grpc.ServiceDesc for ProductServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductServer",
	HandlerType: (*ProductServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductServer_CreateProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _ProductServer_GetProductById_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _ProductServer_GetAllProducts_Handler,
		},
		{
			MethodName: "UpdateProduc",
			Handler:    _ProductServer_UpdateProduc_Handler,
		},
		{
			MethodName: "DeletedProduct",
			Handler:    _ProductServer_DeletedProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowRealTimeAddinAndDeleteing",
			Handler:       _ProductServer_ShowRealTimeAddinAndDeleteing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/protoduct/prtoduct.proto",
}
